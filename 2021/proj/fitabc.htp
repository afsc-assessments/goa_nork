#define SEPFUN1
#define SEPFUN3
#define SEPFUN4
class model_data : public ad_comm{
  public:
  int nsd;
  data_int  nnodes;
  data_number  samplesize;
  data_number  pen_spp;
  data_number  pen_nodes;
  data_int  nspp;
  data_int  nyrs;
  int nobs;
  data_matrix data;
  d3_array obs_tac;
  d3_array obs_abc;
  d3_array rescaled_abc;
  dvector maxabc;
  double offset;
  imatrix inode;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  friend class df1b2_pre_parameters;
  friend class df1b2_parameters;
  static model_parameters * model_parameters_ptr;
  static model_parameters * get_model_parameters_ptr(void)
  {
    return model_parameters_ptr;
  }
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int hessian_phase(void)
  {
    return initial_params::in_hessian_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  void begin_df1b2_funnel(void);
  void end_df1b2_funnel(void);
  dvector double_control_flags;
  param_number  tac_pen;
  param_init_bounded_matrix theta;
  param_matrix pred_tac;
  param_matrix abc_tac;
  param_stddev_matrix sdTAC;
  param_vector like;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value  obj_fun;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}

};
  
class df1b2_pre_parameters : public model_parameters
{ 
public: 
  df1b2_pre_parameters(int sz,int argc, char * argv[]) : 
    model_parameters(sz,argc,argv){;}
  re_objective_function_value  obj_fun;
  void begin_df1b2_funnel(void); 
  void setup_quadprior_calcs(void); 
  void end_df1b2_funnel(void);
}; 
 
class df1b2_parameters : public df1b2_pre_parameters 
{ 
public: 
  static df1b2_parameters * df1b2_parameters_ptr;
  static df1b2_parameters * get_df1b2_parameters_ptr(void) 
  { 
    return df1b2_parameters_ptr; 
  } 
  void deallocate(); 
  df1b2_parameters(int sz,int argc, char * argv[]) : 
    df1b2_pre_parameters(sz,argc,argv) 
  { 
    df1b2_parameters_ptr=this;
  }
  df1b2variable  tac_pen;
  df1b2_init_bounded_matrix theta;
  df1b2matrix pred_tac;
  df1b2matrix abc_tac;
  df1b2matrix sdTAC;
  df1b2vector like;
  df1b2variable prior_function_value;
  df1b2variable likelihood_function_value;
   // re_objective_function_value  obj_fun;
  virtual void user_function(void); 
  virtual void allocate(void); 
 // void begin_df1b2_funnel(void); 
 // void setup_quadprior_calcs(void); 
 // void end_df1b2_funnel(void);

};
