#if !defined(_WVBL_)
#  define _WVBL_

class model_data : public ad_comm{
  data_int nages;
  data_vector ages;
  data_vector Wbar_obs;
  data_vector SD_Wbar;
  data_int ph_Winf;
  data_int ph_k;
  data_int ph_t0;
  data_int ph_beta;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  dvariable adromb(dvariable(model_parameters::*f)(const dvariable&), double a, double b, int ns)
  {
    using namespace std::placeholders;
    _func func = std::bind(f, this, _1);
    return function_minimizer::adromb(func, a, b, ns);
  }
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_number Winf;
  param_init_bounded_number k;
  param_init_bounded_number t0;
  param_init_number beta;
  param_vector Wbar_est;
  param_vector yvar;
  param_vector yconst;
  param_vector RSS;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value jnll;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void get_Wbar_est(void);
  void evaluate_the_objective_function(void);

};
#endif
